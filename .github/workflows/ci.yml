name: Composer CI/CD - Atomic Documentation Engine

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  BUN_VERSION: 'latest'

jobs:
  lint-and-typecheck:
    name: Lint and TypeScript Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type checking
        run: npx tsc --noEmit

      - name: Validate Composer architecture
        run: |
          echo "📝 Validating Composer architecture..."
          
          # Check Class = Directory pattern
          for class in BuildPipeline Composer Template ConfigLoader ImportResolver; do
            if [ ! -d "src/$class" ]; then
              echo "❌ Missing class directory: $class"
              exit 1
            fi
          done
          
          # Check atomic documentation structure
          if [ ! -d "src/doc" ]; then
            echo "❌ Missing atomic docs directory"
            exit 1
          fi
          
          echo "✅ Composer architecture validated"

  build-test:
    name: Build and Core Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        runtime: ['node', 'bun']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: matrix.runtime == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Bun
        if: matrix.runtime == 'bun'
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: |
          if [ "${{ matrix.runtime }}" = "bun" ]; then
            bun install
          else
            npm ci
          fi

      - name: Build Composer
        run: |
          echo "📝 Building Composer framework..."
          if [ "${{ matrix.runtime }}" = "bun" ]; then
            bun run build
          else
            npm run build
          fi

      - name: Test CLI interface
        run: |
          echo "🧪 Testing Composer CLI..."
          node bin/composer.mjs --help
          node bin/composer.mjs --version

      - name: Run unit tests
        run: |
          if [ "${{ matrix.runtime }}" = "bun" ]; then
            bun test
          else
            npm test
          fi

  battle-tests:
    name: Battle Terminal Tests
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Composer
        run: npm run build

      - name: Install Battle framework
        run: |
          cd ../battle
          npm install
          npm run build
          npm link
          cd ../composer

      - name: Run Battle tests
        run: |
          echo "⚔️ Running Composer Battle tests..."
          
          # Run the recovered Battle tests
          if [ -f "composer.battle.cjs" ]; then
            battle test composer.battle.cjs
          fi

      - name: Upload Battle reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: composer-battle-reports
          path: |
            logs/
            battle-reports/
          retention-days: 7

  documentation-tests:
    name: Documentation Generation Tests
    runs-on: ubuntu-latest
    needs: battle-tests
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Composer
        run: npm run build

      - name: Test atomic documentation
        run: |
          echo "📄 Testing atomic documentation..."
          
          # Test Composer can build its own docs
          node bin/composer.mjs build --config composer.config.cjs --verbose
          
          # Verify output files were created
          if [ -f "CLAUDE.md" ]; then
            echo "✅ Self-documentation generated"
          else
            echo "❌ Self-documentation failed"
            exit 1
          fi

      - name: Test template processing
        run: |
          echo "🎨 Testing template processing..."
          
          # Create test template and data
          mkdir -p tmp/test-docs/atoms
          echo "title: Test Document" > tmp/test-docs/atoms/test.yaml
          echo "content: This is a test" >> tmp/test-docs/atoms/test.yaml
          
          echo "# {{title}}\n{{content}}" > tmp/test-template.md
          
          # Create test config
          cat > tmp/test-config.js << 'EOF'
          export default {
            sources: ['tmp/test-docs/**/*.yaml'],
            template: 'tmp/test-template.md',
            outputs: [{
              file: 'tmp/test-output.md',
              format: 'markdown'
            }]
          };
          EOF
          
          # Run Composer
          node bin/composer.mjs build --config tmp/test-config.js
          
          # Verify output
          if [ -f "tmp/test-output.md" ]; then
            if grep -q "Test Document" tmp/test-output.md && grep -q "This is a test" tmp/test-output.md; then
              echo "✅ Template processing works"
            else
              echo "❌ Template processing failed"
              exit 1
            fi
          else
            echo "❌ No output generated"
            exit 1
          fi

      - name: Test watch mode
        run: |
          echo "👁️ Testing watch mode..."
          
          # Start watch mode in background
          timeout 10s node bin/composer.mjs watch --config tmp/test-config.js &
          WATCH_PID=$!
          
          sleep 3
          
          # Modify source file
          echo "updated: true" >> tmp/test-docs/atoms/test.yaml
          
          sleep 3
          
          # Kill watch process
          kill $WATCH_PID 2>/dev/null || true
          
          echo "✅ Watch mode test completed"

  multi-format-tests:
    name: Multi-Format Output Tests
    runs-on: ubuntu-latest
    needs: documentation-tests
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Composer
        run: npm run build

      - name: Test all output formats
        run: |
          echo "📋 Testing all output formats..."
          
          # Create comprehensive test config
          cat > tmp/multi-format-config.js << 'EOF'
          export default {
            sources: ['tmp/test-docs/**/*.yaml'],
            template: 'tmp/test-template.md',
            outputs: [
              { file: 'tmp/output.md', format: 'markdown' },
              { file: 'tmp/output.html', format: 'html' },
              { file: 'tmp/output.json', format: 'json' },
              { file: 'tmp/output.yaml', format: 'yaml' },
              { file: 'tmp/output.xml', format: 'xml' },
              { file: 'tmp/output.csv', format: 'csv' }
            ]
          };
          EOF
          
          # Generate all formats
          node bin/composer.mjs build --config tmp/multi-format-config.js
          
          # Verify all formats created
          for format in md html json yaml xml csv; do
            if [ ! -f "tmp/output.$format" ]; then
              echo "❌ Format not generated: $format"
              exit 1
            fi
          done
          
          echo "✅ All formats generated successfully"

  self-documenting-test:
    name: Self-Documenting Test
    runs-on: ubuntu-latest
    needs: multi-format-tests
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Composer
        run: npm run build

      - name: Test self-documentation
        run: |
          echo "🔄 Testing Composer documents itself..."
          
          # Backup current docs
          if [ -f "CLAUDE.md" ]; then
            cp CLAUDE.md CLAUDE.md.backup
          fi
          
          # Regenerate documentation
          node bin/composer.mjs build --config composer.config.cjs
          
          # Verify new docs were generated
          if [ ! -f "CLAUDE.md" ]; then
            echo "❌ Self-documentation failed"
            exit 1
          fi
          
          # Check content is reasonable
          if grep -q "Composer" CLAUDE.md && grep -q "documentation" CLAUDE.md; then
            echo "✅ Self-documentation successful"
          else
            echo "❌ Self-documentation content invalid"
            exit 1
          fi
          
          # Restore backup if needed
          if [ -f "CLAUDE.md.backup" ]; then
            mv CLAUDE.md.backup CLAUDE.md
          fi

  publish:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [build-test, battle-tests, documentation-tests, multi-format-tests, self-documenting-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Create release package
        run: |
          mkdir -p release
          cp -r dist/ release/
          cp -r bin/ release/
          cp package.json release/
          cp README.md release/
          cp LICENSE release/
          
          cd release
          tar -czf ../composer-release.tar.gz .

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: composer-release
          path: composer-release.tar.gz
          retention-days: 30

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [publish]
    if: always()
    
    steps:
      - name: Success notification
        if: needs.publish.result == 'success'
        run: |
          echo "🎉 Composer CI/CD pipeline completed successfully!"
          echo "✅ Multi-platform testing completed"
          echo "✅ Battle terminal tests passed"
          echo "✅ Atomic documentation validated"
          echo "✅ Template processing verified"
          echo "✅ Multi-format output tested"
          echo "✅ Self-documentation capability confirmed"
          echo "📦 Release package created"

      - name: Failure notification
        if: contains(needs.*.result, 'failure')
        run: |
          echo "❌ Composer CI/CD pipeline failed!"
          exit 1