/**
 * Generic Usage Examples for @akaoio/composer
 * Shows how to use composer as a generic data processing engine
 */

const { Composer, BuildPipeline, Platform } = require('../dist/index.js')
const { promises: fs } = require('fs')
const path = require('path')

async function basicExample() {
  console.log('\nüîß Basic Data + Template Example')
  console.log('================================')
  
  // Setup directories
  const workDir = path.join(process.cwd(), 'tmp', 'generic-example')
  await fs.mkdir(path.join(workDir, 'data'), { recursive: true })
  await fs.mkdir(path.join(workDir, 'templates'), { recursive: true })
  
  // Create sample data files
  await fs.writeFile(
    path.join(workDir, 'data', 'config.json'),
    JSON.stringify({
      app: { name: 'My Blog', version: '2.1.0' },
      author: { name: 'Jane Developer', email: 'jane@example.com' }
    }, null, 2)
  )
  
  await fs.writeFile(
    path.join(workDir, 'data', 'posts.yaml'),
    `latest:
  title: "Getting Started with AI"
  date: "2024-01-15"
  tags: ["ai", "programming"]
  
featured:
  title: "Building Distributed Systems"  
  date: "2024-01-10"
  tags: ["architecture", "systems"]`
  )
  
  // Create template
  await fs.writeFile(
    path.join(workDir, 'templates', 'blog-index.md'),
    `# {{data.config.app.name}} v{{data.config.app.version}}

By: {{data.config.author.name}} ({{data.config.author.email}})

## Latest Posts

**{{data.posts.latest.title}}**  
Published: {{data.posts.latest.date}}  
Tags: {{data.posts.latest.tags}}

**{{data.posts.featured.title}}**  
Published: {{data.posts.featured.date}}  
Tags: {{data.posts.featured.tags}}

Generated by @akaoio/composer`
  )
  
  // Use Composer to render
  const composer = new Composer({
    dataPath: path.join(workDir, 'data'),
    templatesPath: path.join(workDir, 'templates'),
    outputPath: path.join(workDir, 'output')
  })
  
  const outputs = await composer.render()
  
  console.log(`‚úÖ Generated ${outputs.size} files`)
  for (const [name, content] of outputs) {
    console.log(`üìÑ ${name}:`)
    console.log(content.substring(0, 200) + '...')
  }
}

async function platformExample() {
  console.log('\nüñ•Ô∏è  Platform Detection Example')  
  console.log('==============================')
  
  const platform = Platform.getInstance()
  const capabilities = platform.getCapabilities()
  const paths = platform.getPaths()
  
  console.log(`Platform: ${platform.getName()}`)
  console.log(`Runtime: ${capabilities.runtime}`)
  console.log(`Architecture: ${capabilities.arch}`)
  console.log(`Has Node: ${capabilities.hasNode}`)
  console.log(`Has Bun: ${capabilities.hasBun}`)
  console.log(`Case Sensitive FS: ${capabilities.caseSensitiveFS}`)
  console.log(`Recommended Watcher: ${platform.getWatcherType()}`)
  console.log(`Recommended Glob: ${platform.getGlobType()}`)
  console.log(`User Data Dir: ${paths.userData}`)
  console.log(`Cache Dir: ${paths.cache}`)
  
  // Platform-aware directory resolution
  const appDataDir = platform.resolveDataDir('my-awesome-app')
  const appConfigDir = platform.resolveConfigDir('my-awesome-app')
  
  console.log(`App Data: ${appDataDir}`)
  console.log(`App Config: ${appConfigDir}`)
}

async function buildPipelineExample() {
  console.log('\n‚öôÔ∏è  Build Pipeline Example')
  console.log('==========================')
  
  // Advanced config-driven build system
  const workDir = path.join(process.cwd(), 'tmp', 'pipeline-example')
  await fs.mkdir(path.join(workDir, 'content'), { recursive: true })
  await fs.mkdir(path.join(workDir, 'api'), { recursive: true })
  
  // Create various data sources
  await fs.writeFile(
    path.join(workDir, 'content', 'about.md'),
    `---
title: About Us
section: company
---

We are a technology company focused on building amazing tools.`
  )
  
  await fs.writeFile(
    path.join(workDir, 'api', 'endpoints.json'),
    JSON.stringify({
      users: { method: 'GET', path: '/api/users' },
      posts: { method: 'GET', path: '/api/posts' },
      auth: { method: 'POST', path: '/api/auth' }
    })
  )
  
  // Custom processors
  const markdownProcessor = {
    name: 'markdown-bundler',
    async process(input, options, context) {
      const pages = context.sources.content || []
      let bundle = '# Documentation Bundle\n\n'
      
      for (const page of pages) {
        bundle += `## ${page.title || 'Untitled'}\n\n`
        bundle += `${page.content}\n\n`
        bundle += '---\n\n'
      }
      
      return bundle
    }
  }
  
  const apiDocsProcessor = {
    name: 'api-docs-generator', 
    async process(input, options, context) {
      const endpoints = context.sources.api[0] || {}
      let docs = '# API Documentation\n\n'
      
      for (const [name, config] of Object.entries(endpoints)) {
        docs += `## ${name.toUpperCase()}\n`
        docs += `- Method: ${config.method}\n`
        docs += `- Path: ${config.path}\n\n`
      }
      
      return docs
    }
  }
  
  // Complex build configuration
  const config = {
    sources: {
      content: {
        pattern: path.join(workDir, 'content/**/*.md'),
        parser: 'markdown'
      },
      api: {
        pattern: path.join(workDir, 'api/**/*.json'),
        parser: 'json'
      }
    },
    build: {
      tasks: [
        {
          name: 'bundle-markdown',
          input: 'content',
          processor: 'markdown-bundler'
        },
        {
          name: 'generate-api-docs',
          input: 'api', 
          processor: 'api-docs-generator'
        }
      ]
    },
    outputs: [
      {
        target: path.join(workDir, 'dist', 'content-bundle.md'),
        format: 'markdown',
        processor: 'markdown-bundler'
      },
      {
        target: path.join(workDir, 'dist', 'api-docs.md'),
        format: 'markdown', 
        processor: 'api-docs-generator'
      }
    ]
  }
  
  const pipeline = new BuildPipeline(config)
  pipeline.registerProcessor(markdownProcessor)
  pipeline.registerProcessor(apiDocsProcessor)
  
  const outputs = await pipeline.execute()
  
  console.log(`‚úÖ Pipeline generated ${outputs.size} outputs`)
  for (const [name, content] of outputs) {
    console.log(`üìÑ ${name}: ${content.length} chars`)
  }
}

async function crossFormatImportExample() {
  console.log('\nüîó Cross-Format Import Example')
  console.log('===============================')
  
  const workDir = path.join(process.cwd(), 'tmp', 'import-example')
  await fs.mkdir(workDir, { recursive: true })
  
  // Create files that import from each other
  await fs.writeFile(
    path.join(workDir, 'config.json'),
    JSON.stringify({
      database: { host: 'localhost', port: 5432 },
      cache: { type: 'redis', ttl: 3600 }
    })
  )
  
  await fs.writeFile(
    path.join(workDir, 'app.yaml'),
    `imports:
  - source: ./config.json
    alias: config

name: My Application
version: 1.2.0
environment: production`
  )
  
  const { ImportResolver } = require('../dist/index.js')
  const resolver = new ImportResolver()
  
  const result = await resolver.processImportChain(path.join(workDir, 'app.yaml'))
  
  console.log('üìã Resolved configuration:')
  console.log(JSON.stringify(result, null, 2))
}

// Run all examples
async function runExamples() {
  try {
    await basicExample()
    await platformExample() 
    await buildPipelineExample()
    await crossFormatImportExample()
    
    console.log('\n‚úÖ All examples completed successfully!')
  } catch (error) {
    console.error('‚ùå Example failed:', error)
    process.exit(1)
  }
}

// Export functions for individual use
module.exports = {
  basicExample,
  platformExample,
  buildPipelineExample,
  crossFormatImportExample,
  runExamples
}

// Run if called directly
if (require.main === module) {
  runExamples()
}